window.AlphaJpgApp = window.AlphaJpgApp || {};(function(){	var HeredocTypeException = function(value){		this.value = value.toString();		this.message = "Heredoc argument requires as a function contains a block comment.";		this.toString = function(){			return this.message + "\n" + this.value;		};	};		var HeredocSyntaxException = function(value){		this.value = value.toString();		this.message = "Heredoc argument must contain a block comment.";		this.toString = function(){			return this.message + "\n" + this.value;		};	};	window.AlphaJpgApp.util = {		heredoc : function(exp, trimIndent){			var commentExp = { start : "/*", end : "*/" };			if(typeof exp != "function"){				throw new HeredocTypeException(exp);			}			var docContent = exp.toString();			if(!~docContent.indexOf(commentExp.start) || !~docContent.indexOf(commentExp.end)){				throw new HeredocSyntaxException(exp);			}			docContent = docContent.slice(docContent.indexOf(commentExp.start) + commentExp.start.length);			docContent = docContent.slice(0, docContent.indexOf(commentExp.end));			docContent = docContent.replace(/^([\n|\r\n|\r]+)/, "");						var lines = docContent.split(/[\r|\r\n|\n]/);			if(lines.length && !(lines[0].trim())){				lines.shift();			}			if(lines.length && !(lines[lines.length-1].trim())){				lines.pop();			}						if(!!trimIndent){				var indentLength = 9999;				for(var i=0; i<lines.length; i++){					indentLength = Math.min(indentLength, lines[i].match(/^[ \t]*/)[0].length);				}								for(var i=0; i<lines.length; i++){					lines[i] = lines[i].replace(new RegExp("^([ \t]{" + indentLength + "})"), "");				}			}			docContent = lines.join("\n");			return docContent;		},		zip : (function(){			if(!!JSZip){				return JSZip;			}			throw new Error("requires JSZip");		})(),		saveAs : (function(){			if(!!saveAs){				return saveAs;			}			throw new Error("requires saveAs");		})()	};})();