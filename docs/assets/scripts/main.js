window.AlphaJpgApp = window.AlphaJpgApp || {};(function(){	var HeredocTypeException = function(value){		this.value = value.toString();		this.message = "Heredoc argument requires as a function contains a block comment.";		this.toString = function(){			return this.message + "\n" + this.value;		};	};		var HeredocSyntaxException = function(value){		this.value = value.toString();		this.message = "Heredoc argument must contain a block comment.";		this.toString = function(){			return this.message + "\n" + this.value;		};	};	window.AlphaJpgApp.util = {		heredoc : function(exp, trimIndent){			var commentExp = { start : "/*", end : "*/" };			if(typeof exp != "function"){				throw new HeredocTypeException(exp);			}			var docContent = exp.toString();			if(!~docContent.indexOf(commentExp.start) || !~docContent.indexOf(commentExp.end)){				throw new HeredocSyntaxException(exp);			}			docContent = docContent.slice(docContent.indexOf(commentExp.start) + commentExp.start.length);			docContent = docContent.slice(0, docContent.indexOf(commentExp.end));			docContent = docContent.replace(/^([\n|\r\n|\r]+)/, "");						var lines = docContent.split(/[\r|\r\n|\n]/);			if(lines.length && !(lines[0].trim())){				lines.shift();			}			if(lines.length && !(lines[lines.length-1].trim())){				lines.pop();			}						if(!!trimIndent){				var indentLength = 9999;				for(var i=0; i<lines.length; i++){					indentLength = Math.min(indentLength, lines[i].match(/^[ \t]*/)[0].length);				}								for(var i=0; i<lines.length; i++){					lines[i] = lines[i].replace(new RegExp("^([ \t]{" + indentLength + "})"), "");				}			}			docContent = lines.join("\n");			return docContent;		}	};})();
window.AlphaJpgApp = window.AlphaJpgApp || {};(function(){    var exportContents = {        js : AlphaJpgApp.util.heredoc(function(){/*            var Alpha = {                mask : function(elm){                    var replace = function(original, mask){                        elm.onload = function(){};                        var canvas = document.createElement("canvas");                        canvas.setAttribute("width", original.naturalWidth);                        canvas.setAttribute("height", original.naturalHeight);                                                var con = canvas.getContext("2d");                        con.drawImage(mask, 0, 0);                                                var maskImageData = con.getImageData(0, 0, original.naturalWidth, original.naturalHeight);                                                con.drawImage(original, 0, 0);                        var mainImageData = con.getImageData(0, 0, original.naturalWidth, original.naturalHeight);                                                for(var i=0; i<mainImageData.data.length; i+=4){                            (function(pos){                                mainImageData.data[pos + 3] = maskImageData.data[pos];                            })(i);                        }                        con.putImageData(mainImageData, 0, 0);                                                original.dataset.originalImage = original.getAttribute("src");                        original.src = canvas.toDataURL("image/png");                    };                    var mask = new Image();                    mask.addEventListener("load", function(){                        replace(elm, mask);                    }, false);                    mask.src = elm.dataset.alphaMask;                }            };        */}, true),        html : AlphaJpgApp.util.heredoc(function(){/*            <!doctype html>            <html>                <head>                                </head>            </html>        */}, true)    };    console.log(exportContents.js);    console.log(exportContents.html);})();
window.AlphaJpgApp = window.AlphaJpgApp || {};document.addEventListener("DOMContentLoaded", function(){	}, false);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl91dGlsLmpzIiwiX2NvbnRlbnQuanMiLCJtYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUNBQSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LkFscGhhSnBnQXBwID0gd2luZG93LkFscGhhSnBnQXBwIHx8IHt9O1xyXHIoZnVuY3Rpb24oKXtcclx0dmFyIEhlcmVkb2NUeXBlRXhjZXB0aW9uID0gZnVuY3Rpb24odmFsdWUpe1xyXHRcdHRoaXMudmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xyXHRcdHRoaXMubWVzc2FnZSA9IFwiSGVyZWRvYyBhcmd1bWVudCByZXF1aXJlcyBhcyBhIGZ1bmN0aW9uIGNvbnRhaW5zIGEgYmxvY2sgY29tbWVudC5cIjtcclx0XHR0aGlzLnRvU3RyaW5nID0gZnVuY3Rpb24oKXtcclx0XHRcdHJldHVybiB0aGlzLm1lc3NhZ2UgKyBcIlxcblwiICsgdGhpcy52YWx1ZTtcclx0XHR9O1xyXHR9O1xyXHRcclx0dmFyIEhlcmVkb2NTeW50YXhFeGNlcHRpb24gPSBmdW5jdGlvbih2YWx1ZSl7XHJcdFx0dGhpcy52YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XHJcdFx0dGhpcy5tZXNzYWdlID0gXCJIZXJlZG9jIGFyZ3VtZW50IG11c3QgY29udGFpbiBhIGJsb2NrIGNvbW1lbnQuXCI7XHJcdFx0dGhpcy50b1N0cmluZyA9IGZ1bmN0aW9uKCl7XHJcdFx0XHRyZXR1cm4gdGhpcy5tZXNzYWdlICsgXCJcXG5cIiArIHRoaXMudmFsdWU7XHJcdFx0fTtcclx0fTtcclxyXHR3aW5kb3cuQWxwaGFKcGdBcHAudXRpbCA9IHtcclx0XHRoZXJlZG9jIDogZnVuY3Rpb24oZXhwLCB0cmltSW5kZW50KXtcclx0XHRcdHZhciBjb21tZW50RXhwID0geyBzdGFydCA6IFwiLypcIiwgZW5kIDogXCIqL1wiIH07XHJcdFx0XHRpZih0eXBlb2YgZXhwICE9IFwiZnVuY3Rpb25cIil7XHJcdFx0XHRcdHRocm93IG5ldyBIZXJlZG9jVHlwZUV4Y2VwdGlvbihleHApO1xyXHRcdFx0fVxyXHRcdFx0dmFyIGRvY0NvbnRlbnQgPSBleHAudG9TdHJpbmcoKTtcclx0XHRcdGlmKCF+ZG9jQ29udGVudC5pbmRleE9mKGNvbW1lbnRFeHAuc3RhcnQpIHx8ICF+ZG9jQ29udGVudC5pbmRleE9mKGNvbW1lbnRFeHAuZW5kKSl7XHJcdFx0XHRcdHRocm93IG5ldyBIZXJlZG9jU3ludGF4RXhjZXB0aW9uKGV4cCk7XHJcdFx0XHR9XHJcdFx0XHRkb2NDb250ZW50ID0gZG9jQ29udGVudC5zbGljZShkb2NDb250ZW50LmluZGV4T2YoY29tbWVudEV4cC5zdGFydCkgKyBjb21tZW50RXhwLnN0YXJ0Lmxlbmd0aCk7XHJcdFx0XHRkb2NDb250ZW50ID0gZG9jQ29udGVudC5zbGljZSgwLCBkb2NDb250ZW50LmluZGV4T2YoY29tbWVudEV4cC5lbmQpKTtcclx0XHRcdGRvY0NvbnRlbnQgPSBkb2NDb250ZW50LnJlcGxhY2UoL14oW1xcbnxcXHJcXG58XFxyXSspLywgXCJcIik7XHJcdFx0XHRcclx0XHRcdHZhciBsaW5lcyA9IGRvY0NvbnRlbnQuc3BsaXQoL1tcXHJ8XFxyXFxufFxcbl0vKTtcclx0XHRcdGlmKGxpbmVzLmxlbmd0aCAmJiAhKGxpbmVzWzBdLnRyaW0oKSkpe1xyXHRcdFx0XHRsaW5lcy5zaGlmdCgpO1xyXHRcdFx0fVxyXHRcdFx0aWYobGluZXMubGVuZ3RoICYmICEobGluZXNbbGluZXMubGVuZ3RoLTFdLnRyaW0oKSkpe1xyXHRcdFx0XHRsaW5lcy5wb3AoKTtcclx0XHRcdH1cclx0XHRcdFxyXHRcdFx0aWYoISF0cmltSW5kZW50KXtcclx0XHRcdFx0dmFyIGluZGVudExlbmd0aCA9IDk5OTk7XHJcdFx0XHRcdGZvcih2YXIgaT0wOyBpPGxpbmVzLmxlbmd0aDsgaSsrKXtcclx0XHRcdFx0XHRpbmRlbnRMZW5ndGggPSBNYXRoLm1pbihpbmRlbnRMZW5ndGgsIGxpbmVzW2ldLm1hdGNoKC9eWyBcXHRdKi8pWzBdLmxlbmd0aCk7XHJcdFx0XHRcdH1cclx0XHRcdFx0XHJcdFx0XHRcdGZvcih2YXIgaT0wOyBpPGxpbmVzLmxlbmd0aDsgaSsrKXtcclx0XHRcdFx0XHRsaW5lc1tpXSA9IGxpbmVzW2ldLnJlcGxhY2UobmV3IFJlZ0V4cChcIl4oWyBcXHRde1wiICsgaW5kZW50TGVuZ3RoICsgXCJ9KVwiKSwgXCJcIik7XHJcdFx0XHRcdH1cclx0XHRcdH1cclx0XHRcdGRvY0NvbnRlbnQgPSBsaW5lcy5qb2luKFwiXFxuXCIpO1xyXHRcdFx0cmV0dXJuIGRvY0NvbnRlbnQ7XHJcdFx0fVxyXHR9O1xyXHJ9KSgpOyIsIndpbmRvdy5BbHBoYUpwZ0FwcCA9IHdpbmRvdy5BbHBoYUpwZ0FwcCB8fCB7fTtcclxyKGZ1bmN0aW9uKCl7XHIgICAgdmFyIGV4cG9ydENvbnRlbnRzID0ge1xyICAgICAgICBqcyA6IEFscGhhSnBnQXBwLnV0aWwuaGVyZWRvYyhmdW5jdGlvbigpey8qXHIgICAgICAgICAgICB2YXIgQWxwaGEgPSB7XHIgICAgICAgICAgICAgICAgbWFzayA6IGZ1bmN0aW9uKGVsbSl7XHIgICAgICAgICAgICAgICAgICAgIHZhciByZXBsYWNlID0gZnVuY3Rpb24ob3JpZ2luYWwsIG1hc2spe1xyICAgICAgICAgICAgICAgICAgICAgICAgZWxtLm9ubG9hZCA9IGZ1bmN0aW9uKCl7fTtcciAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIG9yaWdpbmFsLm5hdHVyYWxXaWR0aCk7XHIgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIG9yaWdpbmFsLm5hdHVyYWxIZWlnaHQpO1xyICAgICAgICAgICAgICAgICAgICAgICAgXHIgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29uID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcciAgICAgICAgICAgICAgICAgICAgICAgIGNvbi5kcmF3SW1hZ2UobWFzaywgMCwgMCk7XHIgICAgICAgICAgICAgICAgICAgICAgICBcciAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXNrSW1hZ2VEYXRhID0gY29uLmdldEltYWdlRGF0YSgwLCAwLCBvcmlnaW5hbC5uYXR1cmFsV2lkdGgsIG9yaWdpbmFsLm5hdHVyYWxIZWlnaHQpO1xyICAgICAgICAgICAgICAgICAgICAgICAgXHIgICAgICAgICAgICAgICAgICAgICAgICBjb24uZHJhd0ltYWdlKG9yaWdpbmFsLCAwLCAwKTtcciAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYWluSW1hZ2VEYXRhID0gY29uLmdldEltYWdlRGF0YSgwLCAwLCBvcmlnaW5hbC5uYXR1cmFsV2lkdGgsIG9yaWdpbmFsLm5hdHVyYWxIZWlnaHQpO1xyICAgICAgICAgICAgICAgICAgICAgICAgXHIgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaTxtYWluSW1hZ2VEYXRhLmRhdGEubGVuZ3RoOyBpKz00KXtcciAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24ocG9zKXtcciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkltYWdlRGF0YS5kYXRhW3BvcyArIDNdID0gbWFza0ltYWdlRGF0YS5kYXRhW3Bvc107XHIgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkoaSk7XHIgICAgICAgICAgICAgICAgICAgICAgICB9XHIgICAgICAgICAgICAgICAgICAgICAgICBjb24ucHV0SW1hZ2VEYXRhKG1haW5JbWFnZURhdGEsIDAsIDApO1xyICAgICAgICAgICAgICAgICAgICAgICAgXHIgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbC5kYXRhc2V0Lm9yaWdpbmFsSW1hZ2UgPSBvcmlnaW5hbC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XHIgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbC5zcmMgPSBjYW52YXMudG9EYXRhVVJMKFwiaW1hZ2UvcG5nXCIpO1xyICAgICAgICAgICAgICAgICAgICB9O1xyICAgICAgICAgICAgICAgICAgICB2YXIgbWFzayA9IG5ldyBJbWFnZSgpO1xyICAgICAgICAgICAgICAgICAgICBtYXNrLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uKCl7XHIgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlKGVsbSwgbWFzayk7XHIgICAgICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcciAgICAgICAgICAgICAgICAgICAgbWFzay5zcmMgPSBlbG0uZGF0YXNldC5hbHBoYU1hc2s7XHIgICAgICAgICAgICAgICAgfVxyICAgICAgICAgICAgfTtcciAgICAgICAgKi99LCB0cnVlKSxcciAgICAgICAgaHRtbCA6IEFscGhhSnBnQXBwLnV0aWwuaGVyZWRvYyhmdW5jdGlvbigpey8qXHIgICAgICAgICAgICA8IWRvY3R5cGUgaHRtbD5cciAgICAgICAgICAgIDxodG1sPlxyICAgICAgICAgICAgICAgIDxoZWFkPlxyICAgICAgICAgICAgICAgIFxyICAgICAgICAgICAgICAgIDwvaGVhZD5cciAgICAgICAgICAgIDwvaHRtbD5cciAgICAgICAgKi99LCB0cnVlKVxyICAgIH07XHIgICAgY29uc29sZS5sb2coZXhwb3J0Q29udGVudHMuanMpO1xyICAgIGNvbnNvbGUubG9nKGV4cG9ydENvbnRlbnRzLmh0bWwpO1xyfSkoKTsiLCJ3aW5kb3cuQWxwaGFKcGdBcHAgPSB3aW5kb3cuQWxwaGFKcGdBcHAgfHwge307XHJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbigpe1xyXHRccn0sIGZhbHNlKTsiXX0=
